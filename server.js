const { Telegraf, Markup } = require('telegraf')

require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN)
var serverName = '–¶–ö –ö–ü–°–°'
bot.start((ctx) => ctx.reply('–Ø —Ç11888–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å –Ω–µ –æ–±—è–∑–∞–Ω'))
bot.help((ctx) => ctx.reply('–Ø —Ç11–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å –Ω–µ –æ–±—è–∑–∞–Ω'))
bot.on('sticker', (ctx) => ctx.reply('üëç'))


// bot.hears('—Å—Ç–∞–≤—å', (ctx) => {
// 	setInterval(() => {
// 		ctx.reply('üí©üí©üí© –Ø –æ–±–æ—Å—Ä–∞–ª—Å—è üí©üí©üí©')
// 	}, 1000);
// })

var ctxtop = null;

bot.hears('C', (ctx) => {
	ctxtop = ctx;
	ctxtop.reply('–ö–û–ù–¢–ï–ö–°–¢ –£–¢–í–ï–†–ñ–î–Å–ù, –û–ñ–ò–î–ê–Æ WEBSOCKET')
})


bot.launch()

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))





var i = 0
let t = true;
const http = require('http');
const fs = require('fs');
const ws = new require('ws');

const wss = new ws.Server({ noServer: true });

const clients = new Set();

function accept(req, res) {

	if (req.url == '/ws' && req.headers.upgrade &&
		req.headers.upgrade.toLowerCase() == 'websocket' &&
		// –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω: keep-alive, Upgrade
		req.headers.connection.match(/\bupgrade\b/i)) {
		wss.handleUpgrade(req, req.socket, Buffer.alloc(0), onSocketConnect);
	} else if (req.url == '/') { // index.html
		fs.createReadStream('./index.html').pipe(res);
	} else { // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
		res.writeHead(404);
		res.end();
	}
}

function wait(time = TIME_OUT) {
	return new Promise((resolve, reject) => {
		setTimeout(() => resolve(wait), time);
	})
}

function onSocketConnect(ws) {
	clients.add(ws);

	for (let client of clients) {
		log(`–Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);

		ws.on('message', function (message) {

			try {
				if (t) {
					t = false
					client.send(serverName + ': ' + '<br> –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –∫–∞–∫ –ø—Ä–∏ –≤–∏–∞–≥—Ä–µ')
					ctxtop.reply('–ö–û–ù–¢–ï–ö–°–¢ –ó–ê–•–í–ê–ß–ï–ù, WEBSOCKET –£–°–¢–ê–ù–û–í–õ–ï–ù, ')
				}
			}
			catch (err) {
				ws.send(serverName + ': ' + '<br> ERR! <br>–ö–û–ù–¢–ï–ö–°–¢ - –û–¢–°–£–¢–°–¢–í–£–ï–¢')

			}
			try {
				message = JSON.parse(message)
				client.send(serverName + ': ' + '<br> –í—Ä–æ–¥–µ JSON, –Ω–∞–¥–µ—é—Å—å, —Ç–∞–º —Ö–µ–Ω—Ç–∞–π.')
			}
			catch (err) {
				client.send(serverName + ': ' + '<br> –¢–∞–∫, –¢—ã –º–Ω–µ –≤—Ä–æ–¥–µ —Å—Ç—Ä–æ–∫—É –æ—Ç–ø—Ä–∞–≤–∏–ª...')
			}

			log(typeof message)
			if (Array.isArray(message)) {
				log('parse...' + i)
				reply(5 + i)
				function reply(c) {

					wait(1000).then(() => {
						var url = message[i];
						console.log(i);
						try {

							ctxtop.replyWithPhoto(url)
						} catch (err) {

						}
						i++

						if (i < c) reply(c)
					})
				}
			}
			else {
				client.send(serverName + ': ' + '11')
			}



		});

		ws.on('close', function () {
			log(`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ`);
			client.send(serverName + ': ' + '–ó–∞–∫—Ä—ã—Ç–æ')
			clients.delete(ws);
		});
		ws.on('open', function () {
			client.send(serverName + ': ' + '–í–∏–∂—É —Ç–µ–±—è –±—Ä–∞—Ç')
		})
	}

}

let log;
if (!module.parent) {
	log = console.log;
	http.createServer(accept).listen(8080);
} else {
	log = function () { };
	exports.accept = accept;
}